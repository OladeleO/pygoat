name: CI/CD Pipeline

on: [push, pull_request]

jobs:

  dependency-check:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
  
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Download Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.3/dependency-check-6.5.3-release.zip
          unzip dependency-check-6.5.3-release.zip -d dependency-check
          ls -alh dependency-check/

      - name: Run Dependency Check
        run: |
          ${GITHUB_WORKSPACE}/dependency-check/dependency-check/bin/dependency-check.sh --project "MyProject" --scan . --out . --format HTML --failOnCVSS 9 --disableAssembly || echo "Vulnerabilities found"

      - name: Ensure script is executable
        run: chmod +x ${GITHUB_WORKSPACE}/dependency-check/dependency-check/bin/dependency-check.sh

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: dependency-check-report.html



  sast:
    needs: dependency-check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Run Bandit Scan
      run: |
        pip install bandit
        bandit -r . -ll -iii --exit-zero -o bandit-report.txt -f txt || echo "Bandit scan completed with issues"
    - name: Upload Bandit Report as an Artifact
      uses: actions/upload-artifact@v2
      with:
        name: bandit-report
        path: bandit-report.txt




  container-scan:
    needs: sast
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker Image
      run: docker build -t pygoat:latest .
    - name: Scan Docker Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pygoat:latest'
    - name: Upload Trivy scan report
      uses: actions/upload-artifact@v2
      with:
        name: trivy-report
        path: trivy-report.json

  
  
  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube /usr/local/bin/

      - name: Start Minikube
        run: |
          sudo minikube start --driver=none

      - name: Verify Minikube is Running
        run: |
          minikube kubectl -- get nodes

      - name: Create Kubernetes Manifests
        run: |
          mkdir -p k8s
          cat <<EOF > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pygoat-deployment
            labels:
              app: pygoat
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: pygoat
            template:
              metadata:
                labels:
                  app: pygoat
              spec:
                containers:
                - name: pygoat
                  image: vulnerables/pygoat:latest
                  ports:
                  - containerPort: 8000
          EOF

          cat <<EOF > k8s/service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: pygoat-service
            labels:
              app: pygoat
          spec:
            selector:
              app: pygoat
            ports:
              - protocol: TCP
                port: 8000
                targetPort: 8000
            type: ClusterIP
          EOF

      - name: Deploy to Minikube
        run: |
          docker exec -it minikube kubectl apply -f k8s/deployment.yaml
          docker exec -it minikube kubectl apply -f k8s/service.yaml

      - name: Wait for Deployment to be Ready
        run: |
          docker exec -it minikube kubectl rollout status deployment/pygoat-deployment --timeout=300s

      - name: Expose Minikube Service
        run: |
          docker exec -it minikube minikube service pygoat-service --url

  k8s-security-checks:
    needs: deploy-to-kubernetes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@master
        with:
          args: '--directory k8s/'  # Point to your dynamically created Kubernetes manifest directory
          
      - name: Kube-bench Scan
        run: |
          docker run --rm -v $(pwd)/k8s:/kube-bench kube-bench --config-dir /kube-bench/cfg --benchmark gke-1.0 --version 1.23



  
  dast:
    needs: k8s-security-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Start Application (Kubernetes)
        run: |
          kubectl port-forward service/pygoat-service 8000:8000 &
  
      - name: Wait for application to be ready
        run: |
          max_retries=30
          retries=0
          until curl -sSf http://localhost:8000 > /dev/null || [ $retries -eq $max_retries ]
          do
            echo "Waiting for application to be ready..."
            sleep 5
            retries=$((retries+1))
          done
          if [ $retries -eq $max_retries ]; then
            echo "Application failed to start in time"
            exit 1
          fi
  
      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:8000'
          docker_name: 'owasp/zap2docker-stable'
