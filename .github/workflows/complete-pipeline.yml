name: CI/CD Pipeline

on: [push, pull_request]

jobs:

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
  
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Download Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.5.3/dependency-check-6.5.3-release.zip
          unzip dependency-check-6.5.3-release.zip -d dependency-check
          ls -alh dependency-check/

      - name: Run Dependency Check
        run: |
          ${GITHUB_WORKSPACE}/dependency-check/dependency-check/bin/dependency-check.sh --project "MyProject" --scan . --out . --format HTML --failOnCVSS 9 --disableAssembly || echo "Vulnerabilities found"

      - name: Ensure script is executable
        run: chmod +x ${GITHUB_WORKSPACE}/dependency-check/dependency-check/bin/dependency-check.sh

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: dependency-check-report.html

  sast:
    needs: dependency-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Run Bandit Scan
        run: |
          pip install bandit
          bandit -r . -ll -iii --exit-zero -o bandit-report.txt -f txt || echo "Bandit scan completed with issues"
      - name: Upload Bandit Report as an Artifact
        uses: actions/upload-artifact@v2
        with:
          name: bandit-report
          path: bandit-report.txt

  container-and-dast-scan:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build -t pygoat:latest .
          docker images  # List images to confirm pygoat:latest is built

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pygoat:latest'
      
      - name: Run Docker Container with Command Override
        run: |
          docker run -d -p 8000:8000 --name pygoat-container pygoat:latest gunicorn -w 4 -b 0.0.0.0:8000 app:app
          sleep 10

      - name: Test Application is Running
        run: |
          curl -I http://localhost:8000 || (echo "Application failed to start" && docker logs pygoat-container && exit 1)

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.6.0
        with:
          target: 'http://localhost:8000'
          docker_name: 'owasp/zap2docker-stable'
          report: true
          report_format: 'html'
          output: 'zap-report.html'

      - name: Upload Reports
        uses: actions/upload-artifact@v2
        with:
          name: scan-reports
          path: |
            trivy-report.json
            zap-report.html

      - name: Stop and Remove Docker Containerrr
        run: |
          docker stop pygoat-container
          docker rm pygoat-container
