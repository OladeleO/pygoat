name: PyGoat CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Software Composition Analysis (SCA)
  sca_safety:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies and Safety
        run: |
          pip install safety
          if [ ! -f "requirements.txt" ]; then
            echo "Error: requirements.txt not found!" && exit 1
          fi
          pip install -r requirements.txt

      - name: Run Safety (SCA)
        run: |
          safety check --file=requirements.txt --json > safety-report.json || echo "Safety scan completed with issues"

      - name: Upload Safety Report
        uses: actions/upload-artifact@v3
        with:
          name: safety-sca-report
          path: safety-report.json

  # Job 2: Static Application Security Testing (SAST)
  sast_bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit (SAST)
        run: |
          bandit -r . -ll -iii -f html -o bandit-report.html || echo "Bandit scan completed with issues"

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-sast-html-report
          path: bandit-report.html

  # Job 3: Secrets Detection
  secrets_detection:
    name: Run Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for Gitleaks to scan commit history

      - name: Scan for Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
        continue-on-error: true

      - name: Upload Gitleaks Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-secrets-report
          path: gitleaks.sarif

  # Job 4: Dynamic Application Security Testing (DAST)
  dast_scan:
    runs-on: ubuntu-latest
    needs: [sca_safety, sast_bandit, secrets_detection]
    steps:
      - name: Pull PyGoat Docker Image from Docker Hub
        run: |
          docker pull pygoat/pygoat:latest
          docker run -d --name pygoat-dast -p 8080:8080 pygoat/pygoat:latest

      - name: Wait for PyGoat to Be Ready
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8080 && break || echo "Waiting for PyGoat..." && sleep 5;
          done


      - name: Pull OWASP ZAP Docker Image
        run: |
          docker pull owasp/zap2docker


      - name: Run OWASP ZAP DAST Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw -t owasp/zap2docker-weekly zap-baseline.py -t http://localhost:8080 -r zap-report.html || echo "DAST scan completed with issues"
      

      - name: Upload OWASP ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-dast-report
          path: zap-report.html

      - name: Cleanup Docker Environment
        run: |
          docker stop pygoat-dast
          docker rm pygoat-dast
