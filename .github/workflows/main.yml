name: PyGoat CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Software Composition Analysis (SCA)
  sca_safety:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies and Safety
        run: |
          pip install safety
          if [ ! -f "requirements.txt" ]; then
            echo "Error: requirements.txt not found!" && exit 1
          fi
          pip install -r requirements.txt

      - name: Run Safety (SCA)
        run: |
          safety check --file=requirements.txt --json > safety-report.json || echo "Safety scan completed with issues"

      - name: Upload Safety Report
        uses: actions/upload-artifact@v3
        with:
          name: safety-sca-report
          path: safety-report.json

  # Job 2: Static Application Security Testing (SAST)
  sast_bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit (SAST)
        run: |
          bandit -r . -ll -iii -f html -o bandit-report.html || echo "Bandit scan completed with issues"

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-sast-html-report
          path: bandit-report.html

  # Job 3: Secrets Detection
  secrets_detection:
    name: Run Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for Gitleaks to scan commit history

      - name: Scan for Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
        continue-on-error: true

      - name: Upload Gitleaks Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-secrets-report
          path: gitleaks.sarif

  # Job 4: Dynamic Application Security Testing (DAST)
  dast_scan:
    runs-on: ubuntu-latest
    needs: [sca_safety, sast_bandit, secrets_detection]
    services:
      app:
        image: pygoat/pygoat:latest
        options: >-
          --network=host
          --health-cmd="curl -f http://localhost:8000 || exit 1"
          --health-interval=10s
          --health-retries=5
          --health-timeout=2s
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Verify Service is Up
      - name: Wait for PyGoat to Start
        run: |
          echo "Waiting for PyGoat (localhost:8000) to start..."
          for i in {1..10}; do
            if curl -s http://localhost:8000 >/dev/null; then
              echo "PyGoat is up!"
              break
            else
              echo "Waiting for PyGoat..." && sleep 5
            fi
          done

      # Step 3: Run OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://localhost:8000/sql"
          cmd_options: '-a'
          artifact_name: zap_scan
    
    
    
    
    
    
    
    # services:
    #   app:
    #     image: pygoat/pygoat:latest
    #     ports:
    #       - 8000:8000
    #     options: >-
    #       --health-cmd="curl -L -f http://localhost:8000 || exit 1"
    #       --health-interval=10s
    #       --health-retries=5
    #       --health-timeout=5s
    # steps:
    #   - name: Checkout Code
    #     uses: actions/checkout@v4

    #   - name: Wait for Service to Start
    #     run: |
    #       echo "Waiting for PyGoat (app) service to start..."
    #       for i in {1..10}; do
    #         if curl -L -s http://localhost:8000 >/dev/null; then
    #           echo "PyGoat service is up!"
    #           break
    #         else
    #           echo "Waiting for PyGoat service..." && sleep 5
    #         fi
    #       done

    #   - name: Get Service IP Address
    #     id: get_ip
    #     run: |
    #       export APP_IP=$(docker inspect -f '{{range.NetworkSettings.Networks.github_network}}{{.IPAddress}}{{end}}' app)
    #       echo "APP_IP=$APP_IP" >> $GITHUB_ENV

    #   - name: Run OWASP ZAP Baseline Scan
    #     uses: zaproxy/action-baseline@v0.14.0
    #     with:
    #       target: "http://$APP_IP:8000/sql"
    #       cmd_options: '-a'
    #       artifact_name: zap_scan

      # # Step 5: Publish Dastardly Report
      # - name: Publish Dastardly Report
      #   if: always() # Ensure this step runs regardless of the scan results
      #   uses: mikepenz/action-junit-report@v3
      #   with:
      #     report_paths: '**/dastardly-report.xml' # Path to the generated Dastardly report
      #     require_tests: true
